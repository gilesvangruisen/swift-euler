
/*

Euler #2 - Even fibonacci numbers

Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

*/

func fibonacci(max: Int) -> [Int] {
    
    var numbers = [1, 1]

    return fibonacciNext(numbers, max)

}

func fibonacciNext(numbers: [Int], max: Int) -> [Int] {

    var nSub1 = numbers[numbers.count - 1]
    var nSub2 = numbers[numbers.count - 2]

    var next = nSub2 + nSub1

    if next > max {

        return numbers

    } else {

        var newNumbers = numbers + [next]

        return fibonacciNext(newNumbers, max)

    }
}

let sum = fibonacci(4000000).filter({ $0 % 2 != 0 }).reduce(0, +) // == 4,613,732